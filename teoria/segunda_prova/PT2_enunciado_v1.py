'''
Nessa atividade você deve usar seus conhecimentos sobre banco de dados baseados em colunos e chave-valor, mais especificamente sobre Cassandra e Redis para atender os requisitos pedidos.
Todos as questões tem um exemplo de caso de teste (com dados de entrada e saída esperada) para que você valide a sua solução.

Contexto: Imagine que você está desenvolvendo um banco de dados para uma loja online. Essa loja tem um volume muito grande de vendas e por isso foram escolhidos sistemas de gerenciamento de bancos de dados NoSQL. Os principais objetivos do sistema são: 
i) exibir uma lista de produtos mais recomendados para um determinado usuário; 
ii) armazenar tenoirariamente as informações de produtos no carrinho; e 
iii) registrar as informações de uma venda efetivada.

Para manter as informações das vendas realizadas de forma persistente e distribuída, a tabela de vendas, produtos e usuários foram registrados no Cassandra. 
Apesar de ter um esquema flexível, considere as seguintes informações:
    . Usuário (id: int, estado: text, cidade: text, endereço: text, nome: text, email: text, interesses: list<text>)
    . Produto (id: int, categoria: text, nome: text, custo: int, preco: int, quantidade: int)
    . Venda (id: int, dia: int, mês: int, ano: int, hora: text, valor: int, produtos: list<map<int, int>>, usuario: map<text, text>)
Os dados de usuários devem ser particionados pelo estado e cidade, usando o id para complementar a idenficação.
Produtos devem ser agrupadors por categoria, também usando id para ordenar os produtos em uma mesma partição.
Por fim, os dados das vendas devem ser particionados por dia, mês e ano, usando a hora e o id para complementar a idenficação de uma venda.

A fim de manter consultas rápidas, algumas informações do usuário, suas preferências e seus produtos em carrinho são mantidas no Redis.

---------------------------------------------------------------------------------------------------------------

(20 pontos) Questão 2)
Carregue do Cassandra as informações de cada um dos usuários do estado de Minas Gerais, incluindo a lista de interesses, registre no Redis e realize a consutla no Redis para apresentar os dados registrados.

(30 pontos) Questão 3) 
Imagine que o usuário 3 acessa o feed dele. Use a lista de interesses desse usuário registrada no Redis para buscar as informações sobre produtos mais interessantes no Cassandra (considere que a lista de interesses contém os nomes das categorias de produtos interessantes).

(10 pontos extras) Questão 4) 
O usuário 3 seleciona alguns produtos para o seu carrinho. Registre essas informações no Redis e realize uma consulta para mostrar os dados cadastrados.

(10 pontos extras) Questão 5)
O usuário 3 efetiva a compra dos produtos em seu carrinho. Realize uma consulta no Redis dos dados do carrinho desse usuário e registre as informações sobre essa venda no Cassandra (considere que a data e a hora vão ser passadas como parâmetro). Por fim recupere e retorne o nome do usuário, a hora e o valor das vendas  realizadas no dia atual registradas no Cassadra.
    ## Dica: Use alias para formatar o retorno. Não esqueça de converter o valor monetário.


'''
import json

from datetime import datetime

from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
from cassandra.query import dict_factory

import redis


# This secure connect bundle is autogenerated when you download your SCB,
# if yours is different update the file name below
cloud_config = {
    'secure_connect_bundle': 'cassandra-config/secure-connect-dbiot.zip'
}

# This token JSON file is autogenerated when you download your token,
# if yours is different update the file name below
with open("cassandra-config/dbiot-token.json") as f:
    secrets = json.load(f)

CLIENT_ID = secrets["clientId"]
CLIENT_SECRET = secrets["secret"]

auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
cassandra_session = cluster.connect()
cassandra_session.row_factory = dict_factory  # Returning dict from Cassandra
cassandra_session.set_keyspace('segunda_prova')  # Change to your keyspace

redis_conn = redis.Redis(
    host="redis-19630.c308.sa-east-1-1.ec2.redns.redis-cloud.com", port=19630,
    username="default",  # use your Redis user. More info https://redis.io/docs/latest/operate/oss_and_stack/management/security/acl/
    password="llnlcEsGuvYDSqf7J6vAp6gzo0L20XQF",  # use your Redis password
    decode_responses=True
)

# ------------------- !! Attention !! -------------------
redis_conn.flushall()  # Clear Redis database
# -------------------------------------------------------


# Questão 1
'''
(20 pontos) Questão 1)
Crie as tabelas e registe as informações dos seguintes usuários e produtos no Cassandra e realize a consutla no Cassandra para apresentar:

### Dica: Use valores inteiros ao armazenar os valores monetários no Cassandra (basta multiplicar por 100 na hora de inserir e dividir por 100 quando for apresentar)
'''


def questao_1_a(users):
    '''
    a) a quantidade de usuários registrados 
    '''
    cassandra_session.execute("DROP TABLE IF EXISTS users;")
    query = ''' 
        CREATE TABLE users(
            id int,
            estado text,
            cidade text,
            endereco text,
            nome text,
            email text,
            interesses list<text>,
            primary key((estado, cidade), id)
        );
    '''
    cassandra_session.execute(query)
    cassandra_session.execute("TRUNCATE users;")

    for user in users:
        query = """
            INSERT INTO users(id, estado, cidade, endereco, nome, email, interesses)
            VALUES (%s, %s, %s, %s, %s, %s, %s);
        """
        cassandra_session.execute(
            query,
            (
                user['id'],
                user['estado'],
                user['cidade'],
                user['endereco'],
                user['nome'],
                user['email'],
                user['interesses']
            )
        )

    query = ''' SELECT count(id) AS c FROM users ALLOW FILTERING'''
    result = cassandra_session.execute(query).one()

    if not result:
        return 0
    return result['c']


def test_questao_1_a():

    users = [
        {"id": 1, "estado": "Minas Gerais", "cidade": "Santa Rita do Sapucaí", "endereco": "Rua A, 45", "nome": "Serafim Amarantes",
            "email": "samarantes@g.com", "interesses": ["futebol", "pagode", "engraçado", "cerveja", "estética"]},
        {"id": 2, "estado": "São Paulo", "cidade": "São Bento do Sapucaí", "endereco": "Rua B, 67", "nome": "Tamara Borges",
            "email": "tam_borges@g.com", "interesses": ["estética", "jiujitsu", "luta", "academia", "maquiagem"]},
        {"id": 3, "estado": "Minas Gerais", "cidade": "Santa Rita do Sapucaí", "endereco": "Rua C, 84", "nome": "Ubiratã Carvalho",
            "email": "bira@g.com", "interesses": ["tecnologia", "hardware", "games", "culinária", "servers"]},
        {"id": 4, "estado": "Minas Gerais", "cidade": "Pouso Alegre", "endereco": "Rua D, 21", "nome": "Valéria Damasco",
            "email": "valeria_damasco@g.com", "interesses": ["neurociências", "comportamento", "skinner", "laboratório", "pesquisa"]}
    ]

    assert len(users) == questao_1_a(users)


def questao_1_b(products):
    '''
    b) a custo total dos produtos em estoque (obs.: o custo registrado é apenas o custo unitário de cada produto).
    '''
    cassandra_session.execute("DROP TABLE IF EXISTS products;")
    query = ''' 
        CREATE TABLE products(
            id int,
            categoria text,
            nome text,
            custo int,
            preco int,
            quantidade int,
            primary key((categoria), id)
        )
        WITH CLUSTERING ORDER BY (id ASC);
    '''
    cassandra_session.execute(query)
    cassandra_session.execute("TRUNCATE products;")

    for product in products:
        query = """
            INSERT INTO products(id, categoria, nome, custo, preco, quantidade)
            VALUES (%s, %s, %s, %s, %s, %s);
        """
        cassandra_session.execute(
            query,
            (
                product['id'],
                product['categoria'],
                product['nome'],
                int(product['custo'] * 100),
                int(product['preco'] * 100),
                product['quantidade']
            )
        )

    query = ''' SELECT count(id) AS c FROM products ALLOW FILTERING'''
    result = cassandra_session.execute(query).one()

    if not result:
        return 0
    return result['c']


def teste_questao_1_b():
    products = [
        {"id": 1, "categoria": "escritório", "nome": "Cadeira HM conforto",
            "custo": 2000.00, "preco": 3500.00, "quantidade": 120},
        {"id": 2, "categoria": "culinária", "nome": "Tábua de corte Hawk",
            "custo": 360.00, "preco": 559.90, "quantidade": 40},
        {"id": 3, "categoria": "tecnologia", "nome": "Notebook X",
            "custo": 3000.00, "preco": 4160.99, "quantidade": 76},
        {"id": 4, "categoria": "games", "nome": "Headset W",
            "custo": 265.45, "preco": 422.80, "quantidade": 88},
        {"id": 5, "categoria": "tecnologia", "nome": "Smartphone X",
            "custo": 2000.00, "preco": 3500.00, "quantidade": 120},
        {"id": 6, "categoria": "games", "nome": "Gamepad Y",
            "custo": 256.00, "preco": 519.99, "quantidade": 40},
        {"id": 7, "categoria": "estética", "nome": "Base Ismusquim",
            "custo": 50.00, "preco": 120.39, "quantidade": 76},
        {"id": 8, "categoria": "cerveja", "nome": "Gutten Bier IPA 600ml",
            "custo": 65.45, "preco": 122.80, "quantidade": 88}
    ]

    total_cost = 765559.20

    assert total_cost == questao_1_b(products)


# Questão 2
def questao_2(state):
    '''
    (20 pontos) Questão 2)
    Carregue do Cassandra as informações de cada um dos usuários do estado de Minas Gerais, incluindo a lista de interesses, registre no Redis e realize a consutla no Redis para apresentar os dados registrados.
    '''
    query = f'''
        SELECT id, estado, cidade, endereco, nome, email, interesses
        FROM users
        WHERE estado = '{state}' ALLOW FILTERING;
    '''
    users = cassandra_session.execute(query).all()

    for user in users:
        redis_conn.hset(f"user:{user['id']}",  mapping={
            "estado": user['estado'],
            "cidade": user['cidade'],
            "endereco": user['endereco'],
            "nome": user['nome'],
            "email": user['email'],
        })

        for interesse in user['interesses']:
            redis_conn.lpush(f"interesses:user:{user['id']}", interesse)

    user_keys = redis_conn.keys("user:*")

    users = []
    for key in user_keys:
        user = {}

        id = int(key.replace("user:", ''))
        user['id'] = id

        for key, value in redis_conn.hgetall(key).items():
            user[key] = value

        user['interesses'] = redis_conn.lrange(f"interesses:user:{id}", 0, -1)

        users.append(user)

    return users


def test_questao_2():

    state = "Minas Gerais"

    users = [
        {"id": '1', "estado": "Minas Gerais", "cidade": "Santa Rita do Sapucaí", "endereco": "Rua A, 45", "nome": "Serafim Amarantes",
            "email": "samarantes@g.com", "interesses": ["futebol", "pagode", "engraçado", "cerveja", "estética"]},
        {"id": '3', "estado": "Minas Gerais", "cidade": "Santa Rita do Sapucaí", "endereco": "Rua C, 84", "nome": "Ubiratã Carvalho",
            "email": "bira@g.com", "interesses": ["tecnologia", "hardware", "games", "culinária", "servers"]},
        {"id": '4', "estado": "Minas Gerais", "cidade": "Pouso Alegre", "endereco": "Rua D, 21", "nome": "Valéria Damasco",
            "email": "valeria_damasco@g.com", "interesses": ["neurociências", "comportamento", "skinner", "laboratório", "pesquisa"]}
    ]

    assert users == sorted(questao_2(state), key=lambda d: d['id'])


# Questão 3
def questao_3(user_id):
    '''
    (30 pontos) Questão 3) 
    Imagine que o usuário 3 acessa o feed dele. Use a lista de interesses desse usuário registrada no Redis para buscar as informações sobre produtos mais interessantes no Cassandra (considere que a lista de interesses contém os nomes das categorias de produtos interessantes).
    '''

    interesses = redis_conn.lrange(f"interesses:user:{user_id}", 0, -1)

    interesses_str = ""

    for interesse in interesses:
        interesses_str += f"'{interesse}', "

    interesses_str = interesses_str[:-2]

    query = f'''
        SELECT id, categoria, nome, custo, preco, quantidade
        FROM products
        WHERE categoria in ({interesses_str}) ALLOW FILTERING;
    '''
    products = cassandra_session.execute(query).all()


def test_questao_3():

    user_id = 3

    products = [
        {"id": 2, "nome": "Tábua de corte Hawk", "preco": 559.90},
        {"id": 3, "nome": "Notebook X", "preco": 4160.99},
        {"id": 4, "nome": "Headset W", "preco": 422.80},
        {"id": 5, "nome": "Smartphone X", "preco": 3500.00},
        {"id": 6, "nome": "Gamepad Y", "preco": 519.99}
    ]

    assert products == sorted(questao_3(user_id), key=lambda d: d['id'])


# Questão 4
def questao_4(user_id, cart):
    pass


def test_questao_4():

    user_id = 3

    cart = [
        {"id": '4', "nome": "Headset W", "preco": '422.80', "quantidade": '1'},
        {"id": '6', "categoria": "games", "nome": "Gamepad Y",
            "preco": '519.99', "quantidade": '2'},
    ]

    assert cart == sorted(questao_4(user_id, cart), key=lambda d: d["id"])

# Questão 5


def questao_5(user_id):
    pass


def test_questao_5():

    user_id = 3
    date_time = datetime.now()

    sales = [{"usuario": 'bira@g.com',
              'hora': date_time.strftime("%H:%M"), 'valor': 1462.78}]

    assert sales == questao_5(user_id, date_time)


cassandra_session.shutdown()
redis_conn.close()
